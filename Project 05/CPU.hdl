// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15],out=ainst);  //not instruction for a or c inst 
    Not(in=ainst,out=cinst);    //if a instruction instruction[0..14] are constant value for address

    //A Register
    And(a=cinst,b=instruction[5],out=compa);
    Mux16(a=instruction,b=alu,sel=instruction[15],out=newa);    //     instruction[3..5]   used for destination
    Or(a=ainst,b=compa,out=loada);
    ARegister(in=newa,load=loada,out=a);

    //D Register
    And(a=instruction[4],b=cinst,out=loadd); //inst[4] loads D register 
    DRegister(in=alu,load=loadd,out=d);

    //ALU
    Mux16(a=a,b=inM,sel=instruction[12],out=AorM); //inst[12] is a // loads alu parts (c instruction)
    And(a=instruction[11],b=true,out=zx); //inst[11] c1 for zx
    And(a=instruction[10],b=true,out=nx); //inst[10] c2 for nx
    And(a=instruction[9],b=true,out=zy); //inst[9] c3 for zy
    And(a=instruction[8],b=true,out=ny); //inst[8] c4 for ny
    And(a=instruction[7],b=true,out=f); //inst[7] c5 for f
    And(a=instruction[6],b=true,out=no); //inst[6] c6 for no
    ALU(x=d,y=AorM,zx=zx,nx=nx,zy=zy,ny=ny,f=f,no=no,out=alu,zr=zr,ng=ng);

    //jump
    Not(in=zr,out=notzr);
    Not(in=ng,out=notng);
    And(a=notzr,b=notng,out=pos);
    And(a=instruction[2],b=ng,out=jlt);  //     instruction[0..2] jump command
    And(a=instruction[1],b=zr,out=jz);
    And(a=instruction[0],b=pos,out=jpos);
    Or(a=jlt,b=jz,out=jltz);
    Or(a=jltz,b=jpos,out=jumpcond);
    And(a=cinst,b=jumpcond,out=jump);
   
    //OUTPUTS

    //writeM
    And(a=cinst,b=instruction[3],out=writeM); //c instruction destination write to memory

    //addressM
    And16(a=a,b=true,out[0..14]=addressM); // A Instruction: instruction[0..14] is constant value

    //outM
    And16(a=alu,b=true,out=outM);

    //PC
    PC(in=a,load=jump,inc=true,reset=reset,out[0..14]=pc);
}